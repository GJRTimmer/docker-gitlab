#!/usr/bin/env bash

DEBUG=${DEBUG:-false}

if [ ${DEBUG,,} = "true" ] || [ ${DEBUG} = 1 ]; then
  DEBUG=true
  set -x
fi

# Set default gitlab edition, allow override from build-arg
GITLAB_EDITION=${GITLAB_EDITION:-ce}

# if we're using the enterprise edition suffix the version with -ee
if [ "${GITLAB_EDITION}" = "ee" ]; then
  GITLAB_VERSION="${GITLAB_VERSION}-ee"
fi

echo "Cloning gitlab-${GITLAB_EDITION} ${GITLAB_VERSION}..."
if [ ${DEBUG} = true ]; then
  exec_as_git git clone -q -b v${GITLAB_VERSION} --depth 1 ${GITLAB_INSTALL_URL} ${GITLAB_INSTALL_DIR} || exit 1
else
  exec_as_git git clone -q -b v${GITLAB_VERSION} --depth 1 ${GITLAB_INSTALL_URL} ${GITLAB_INSTALL_DIR} > /dev/null 2>&1 || exit 1
fi

# remove HSTS config from the default headers, we configure it in nginx
exec_as_git sed -i "/headers\['Strict-Transport-Security'\]/d" ${GITLAB_INSTALL_DIR}/app/controllers/application_controller.rb || exit 1

# revert `rake gitlab:setup` changes from gitlabhq/gitlabhq@a54af831bae023770bf9b2633cc45ec0d5f5a66a
exec_as_git sed -i 's/db:reset/db:setup/' ${GITLAB_INSTALL_DIR}/lib/tasks/gitlab/setup.rake || exit 1

cd ${GITLAB_INSTALL_DIR} || exit 1

# install gems, use local cache if available
if [[ -d ${GITLAB_CACHE} ]]; then
  mv ${GITLAB_CACHE} ${GITLAB_INSTALL_DIR}/vendor/cache || exit 1
  chown -R ${GITLAB_USER}:${GITLAB_USER} ${GITLAB_INSTALL_DIR}/vendor/cache || exit 1
fi

echo "Building gitlab-${GITLAB_EDITION} ${GITLAB_VERSION}..."
if [ ${DEBUG} = true ]; then
  exec_as_git bundle install -j"$(nproc)" --deployment --without development test aws || exit 1
else
  exec_as_git bundle install -j"$(nproc)" --deployment --without development test aws > /dev/null 2>&1 || exit 1
fi

# make sure everything in ${GITLAB_HOME} is owned by ${GITLAB_USER} user
echo "Applying Permissions..."
chown -R ${GITLAB_USER}:${GITLAB_USER} ${GITLAB_HOME} || exit 1

# gitlab.yml and database.yml are required for `assets:precompile`
exec_as_git cp ${GITLAB_INSTALL_DIR}/config/resque.yml.example ${GITLAB_INSTALL_DIR}/config/resque.yml || exit 1
exec_as_git cp ${GITLAB_INSTALL_DIR}/config/gitlab.yml.example ${GITLAB_INSTALL_DIR}/config/gitlab.yml || exit 1
exec_as_git cp ${GITLAB_INSTALL_DIR}/config/database.yml.mysql ${GITLAB_INSTALL_DIR}/config/database.yml || exit 1

# Installs nodejs packages required to compile webpack
echo "Installing nodejs packages..."
if [ ${DEBUG} = true ]; then
  exec_as_git yarn install --production --pure-lockfile || exit 1
  exec_as_git yarn add ajv@^4.0.0 || exit 1
else
  exec_as_git yarn install --production --pure-lockfile > /dev/null 2>&1 || exit 1
  exec_as_git yarn add ajv@^4.0.0 > /dev/null 2>&1 || exit 1
fi

echo "Compiling assets. Please be patient, this could take a while..."
if [ ${DEBUG} = true ]; then
  exec_as_git bundle exec rake gitlab:assets:compile USE_DB=false SKIP_STORAGE_VALIDATION=true NODE_OPTIONS="--max-old-space-size=4096" || exit 1
else
  exec_as_git bundle exec rake gitlab:assets:compile USE_DB=false SKIP_STORAGE_VALIDATION=true NODE_OPTIONS="--max-old-space-size=4096" > /dev/null 2>&1 || exit 1
fi

# Remove auto generated secret.yml
rm -f ${GITLAB_INSTALL_DIR}/config/secrets.yml || exit 1

# Remove gitlab-shell secrets
rm -f ${GITLAB_INSTALL_DIR}/.gitlab_shell_secret || exit 1

# Remove Workhorse secrets
rm -f ${GITLAB_INSTALL_DIR}/.gitlab_workhorse_secret || exit 1

# Create temp directory
echo "Applying Permissions"
exec_as_git mkdir -p ${GITLAB_INSTALL_DIR}/tmp/pids/ ${GITLAB_INSTALL_DIR}/tmp/sockets/ || exit 1
chmod -R u+rwX ${GITLAB_INSTALL_DIR}/tmp || exit 1

# WORKAROUND for https://github.com/sameersbn/docker-gitlab/issues/509
rm -rf ${GITLAB_INSTALL_DIR}/builds || exit 1
rm -rf ${GITLAB_INSTALL_DIR}/shared || exit 1
